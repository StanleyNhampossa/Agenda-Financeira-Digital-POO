package view.registro;

import java.awt.Color;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import model.Formatador;
import view.Main;
import view.geral.Notificacao;

/**
 *
 * @author Grácio Macuácua
 */
public final class DadosCadastroP1 extends javax.swing.JPanel implements KeyListener {

    /**
     * Creates new form ViewPerfil
     */
    public DadosCadastroP1() {
        initComponents();
        txtOutrosNomes.addKeyListener(this);
        txtApelido.addKeyListener(this);
        jdcNascimento.addKeyListener(this);
        cbGenero.addKeyListener(this);

        SimpleDateFormat sdf = new SimpleDateFormat("dd/MMMM/yyyy");
        String data = sdf.format(Calendar.getInstance().getTime());

        try {
            jdcNascimento.setMaxSelectableDate(sdf.parse(data));
        } catch (ParseException ex) {
            Notificacao.mostrarDialogoDeOpcaoSingular(Main.main, "Erro na conversão da data!", Notificacao.ICONE_ERRO);
        }       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblNascimento = new javax.swing.JLabel();
        lblGenero = new javax.swing.JLabel();
        lblApelido = new javax.swing.JLabel();
        txtOutrosNomes = new javax.swing.JTextField();
        lblPNome = new javax.swing.JLabel();
        txtApelido = new javax.swing.JTextField();
        jdcNascimento = new com.toedter.calendar.JDateChooser();
        cbGenero = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(255, 255, 255));

        lblNascimento.setBackground(new java.awt.Color(255, 255, 255));
        lblNascimento.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblNascimento.setForeground(new java.awt.Color(0, 102, 102));
        lblNascimento.setText("Data de Nascimento");

        lblGenero.setBackground(new java.awt.Color(255, 255, 255));
        lblGenero.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblGenero.setForeground(new java.awt.Color(0, 102, 102));
        lblGenero.setText("Gênero");

        lblApelido.setBackground(new java.awt.Color(255, 255, 255));
        lblApelido.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblApelido.setForeground(new java.awt.Color(0, 102, 102));
        lblApelido.setText("Apelido");

        txtOutrosNomes.setDocument(new Formatador(35, Formatador.TipoEntrada.TEXTO));
        txtOutrosNomes.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtOutrosNomes.setForeground(new java.awt.Color(102, 102, 102));
        txtOutrosNomes.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(12, 91, 160)));
        txtOutrosNomes.setDocument(new Formatador(40, Formatador.TipoEntrada.TEXTO));

        lblPNome.setBackground(new java.awt.Color(255, 255, 255));
        lblPNome.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblPNome.setForeground(new java.awt.Color(0, 102, 102));
        lblPNome.setText("Outros Nomes");

        txtApelido.setDocument(new Formatador(20, Formatador.TipoEntrada.TEXTO));
        txtApelido.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtApelido.setForeground(new java.awt.Color(102, 102, 102));
        txtApelido.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(12, 91, 160)));
        txtApelido.setEnabled(false);
        txtApelido.setDocument(new Formatador(15, Formatador.TipoEntrada.TEXTO));

        jdcNascimento.setBackground(new java.awt.Color(255, 255, 255));
        jdcNascimento.setForeground(new java.awt.Color(0, 102, 102));
        jdcNascimento.setEnabled(false);
        jdcNascimento.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jdcNascimento.setOpaque(false);
        jdcNascimento.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jdcNascimentoPropertyChange(evt);
            }
        });

        cbGenero.setBackground(new java.awt.Color(255, 255, 255));
        cbGenero.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cbGenero.setForeground(new java.awt.Color(0, 102, 102));
        cbGenero.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecionar", "Masculino", "Feminino" }));
        cbGenero.setBorder(null);
        cbGenero.setEnabled(false);
        cbGenero.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbGeneroItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txtApelido)
            .addComponent(jdcNascimento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblNascimento)
                    .addComponent(txtOutrosNomes, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPNome, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblApelido, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblGenero, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(cbGenero, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lblPNome, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtOutrosNomes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(lblApelido, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtApelido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(lblNascimento, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jdcNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(lblGenero, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbGenero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * 
     */
    private void verificarEntrada() {
        if (txtOutrosNomes.getText().strip().length() >= 2) {
            txtApelido.setEnabled(true);
        } else {
            desabilitarCampos(2);
        }
        if (txtApelido.getText().strip().length() >= 2 && txtApelido.isEnabled()) {
            jdcNascimento.setEnabled(true);
        } else {
            desabilitarCampos(3);
        }
        if (jdcNascimento.getDate() != null && jdcNascimento.isEnabled()) {
            cbGenero.setEnabled(true);
        } else {
            desabilitarCampos(4);
        }

        efectuarValidacao();
    }
    
    /** 
     * Activa ou desactiva o botão prosseguir se os campos estiverem devidamente preenchidos
     * ou não preenchidos, respectivamente.
     * @return {@code true} se os campos estiverem devidamente preenchidos, {@code false} caso contrário.
     */
    boolean efectuarValidacao() {
        if (txtApelido.isEnabled() && jdcNascimento.isEnabled() && cbGenero.isEnabled() && !String.valueOf(cbGenero.getSelectedItem()).equalsIgnoreCase("Selecionar")) {
            PainelRegistro.user.setNome(txtOutrosNomes.getText() + " " + txtApelido.getText());
            PainelRegistro.user.setDataNascimento(jdcNascimento.getDate());
            PainelRegistro.user.setGenero(cbGenero.getSelectedItem().toString());

            PainelRegistro.btn.setkStartColor(new Color(12, 91, 160));
            PainelRegistro.btn.setkEndColor(new Color(0, 102, 255));
            PainelRegistro.btn.setEnabled(true);
            
            return true;
        }

        PainelRegistro.btn.setkStartColor(new Color(153, 153, 153));
        PainelRegistro.btn.setkEndColor(new Color(153, 153, 153));
        PainelRegistro.btn.setEnabled(false);
        
        return false;
    }
    
    /**
     * Desactiva os campos do painel se algum destes não estiver devidamente preenchido.
     * @param inicio a linha por onde deve começar a desactivação dos campos.
     */
    private void desabilitarCampos(int inicio) {
        switch (inicio) {
            case 2 -> {
                txtApelido.setEnabled(false);
                jdcNascimento.setEnabled(false);
                cbGenero.setEnabled(false);
            }
            case 3 -> {
                jdcNascimento.setEnabled(false);
                cbGenero.setEnabled(false);
            }
            default ->
                cbGenero.setEnabled(false);
        }        
    }
            
    private void jdcNascimentoPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jdcNascimentoPropertyChange
        if (jdcNascimento.getDate() != null)
            cbGenero.setEnabled(true);
        else
            cbGenero.setEnabled(false);
    }//GEN-LAST:event_jdcNascimentoPropertyChange

    private void cbGeneroItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbGeneroItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            if ("Masculino".equals(evt.getItem().toString()) || "Feminino".equals(evt.getItem().toString())) {
                efectuarValidacao();
            } else {
                PainelRegistro.btn.setkStartColor(new Color(153, 153, 153));
                PainelRegistro.btn.setkEndColor(new Color(153, 153, 153));
                PainelRegistro.btn.setEnabled(false);
            }
        }
    }//GEN-LAST:event_cbGeneroItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cbGenero;
    private com.toedter.calendar.JDateChooser jdcNascimento;
    private javax.swing.JLabel lblApelido;
    private javax.swing.JLabel lblGenero;
    private javax.swing.JLabel lblNascimento;
    private javax.swing.JLabel lblPNome;
    private javax.swing.JTextField txtApelido;
    private javax.swing.JTextField txtOutrosNomes;
    // End of variables declaration//GEN-END:variables
    
    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyPressed(KeyEvent e) {
    }

    @Override
    public void keyReleased(KeyEvent e) {
        if (e.getKeyCode() == KeyEvent.VK_ENTER) {
            if (txtOutrosNomes.hasFocus() && txtApelido.isEnabled()) {
                txtApelido.requestFocus();
            } else if (txtApelido.hasFocus() && jdcNascimento.isEnabled()) {
                jdcNascimento.requestFocus();
            } else if (jdcNascimento.hasFocus() && jdcNascimento.getDate() != null) {
                cbGenero.requestFocus();
            } else if (cbGenero.hasFocus() && PainelRegistro.btn.isEnabled())
                PainelRegistro.btn.doClick();            
        }   
        
        verificarEntrada();
    }        
}
